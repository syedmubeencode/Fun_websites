<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html b:css='false'
	xmlns='http://www.w3.org/1999/xhtml'
	xmlns:b='http://www.google.com/2005/gml/b'
	xmlns:data='http://www.google.com/2005/gml/data'
	xmlns:expr='http://www.google.com/2005/gml/expr'>
	<head>
		<b:skin>
			<![CDATA[
			
		]]>
		</b:skin>
		<!-- Adding a simple <style> tag -->
		<style>
  body {
    font-family: &#39;Roboto&#39;, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    box-sizing: border-box;
    background-color: #f9f9f9;
  }
  .container {
    width: 100%;
    max-width: 800px;
    padding: 20px;
    box-sizing: border-box;
    text-align: center;
  }
  h1 {
    font-size: 2em;
    margin-bottom: 5px;
  }
  h2 {
    font-size: 1em;
    color: #555;
    margin-bottom: 15px;
  }
  textarea {
    width: 100%;
    max-width: 650px; /* Increased size of the text box to match button width */
    min-height: 120px;
    padding: 12px; /* Increased padding for better text visibility */
    margin: 10px 0;
    border: 2px solid #ccc;
    border-radius: 8px;
    resize: vertical;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease, transform 0.2s ease;
    font-family: monospace;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  textarea:focus {
    border-color: #007bff;
    transform: scale(1.02); /* Slight animation on focus */
  }
  input[type=&quot;password&quot;] {
    width: 100%;
    max-width: 300px; /* Keep the password input size the same as before */
    padding: 10px;
    margin: 10px 0;
    border: 2px solid #ccc;
    border-radius: 8px;
    text-align: center;
    font-size: 1em;
    outline: none;
    transition: border-color 0.3s ease;
  }
  input[type=&quot;password&quot;]:focus {
    border-color: #007bff;
  }
  button {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: #fff;
    border: none;
    padding: 12px 15px;
    border-radius: 8px;
    cursor: pointer;
    width: 100%;
    max-width: 300px; /* Keep the button width the same as before */
    font-size: 1em;
    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    margin: 10px 0;
  }
  button:hover {
    background: linear-gradient(135deg, #0056b3, #003d80);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2); /* Shadow effect on hover */
  }
  button:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2); /* Slight shadow effect when active */
  }
  #security-code-display {
    margin: 10px 0;
    font-size: 1em;
    color: #333;
  }
  .message {
    margin-top: 10px;
    color: #555;
    font-size: 0.9em;
    white-space: pre-wrap;
    word-wrap: break-word;
    text-align: center;
  }
  .footer {
    margin-top: 15px;
    font-size: 0.8em;
    color: #777;
    text-align: center;
  }
</style>
	</head>
	<body>
		<!-- Main content section to display blog posts -->
		<b:section class='blog-posts' id='main' showaddelement='no'/>
		<div class='container'>
			<h1>ShareMeApp</h1>
			<h2>Syed Mubeen A</h2>
			<div id='main-section'>
				<textarea id='text-input' placeholder='Enter your text here'/>
				<div id='security-code-display'>
					<label>Your Security Code: </label>
					<span id='security-code'>XX00</span>
				</div>
				<button id='save-button'>Save Text</button>
				<button id='update-button'>Update Text</button>
				<!-- New Update Text Button -->
				<textarea id='access-text' placeholder='Text will appear here' readonly='readonly'/>
				<input id='access-code' placeholder='Enter security code' type='password'/>
				<button id='access-button'>Access Text</button>
			</div>
			<div class='message' id='message'/>
			<div class='footer'>ShareMeApp created by Syed Mubeen A</div>
		</div>
		<script>
    const messageDiv = document.getElementById(&#39;message&#39;);
    const accessTextArea = document.getElementById(&#39;access-text&#39;);
    const securityCodeSpan = document.getElementById(&#39;security-code&#39;);
    let currentSecurityCode = &#39;&#39;; // Dynamically updated security code
    let currentKey = &#39;&#39;; // Store the dynamically entered key

    // Save text using the API
    document.getElementById(&#39;save-button&#39;).addEventListener(&#39;click&#39;, async () =&gt; {
      const text = document.getElementById(&#39;text-input&#39;).value;
      currentKey = prompt(&quot;Enter a 2-character key for security code:&quot;);

      // Validate the key input (should be exactly 2 characters)
      if (!currentKey || currentKey.length !== 2) {
        messageDiv.textContent = &#39;Invalid key. Please enter exactly 2 characters.&#39;;
        return;
      }

      if (text) {
        try {
          const response = await fetch(&#39;https://6788c5262c874e66b7d63895.mockapi.io/text/data&#39;, {
            method: &#39;POST&#39;,
            headers: {
              &#39;Content-Type&#39;: &#39;application/json&#39;,
            },
            body: JSON.stringify({
              message: text,
              key: currentKey, // Use dynamic key entered by user
            }),
          });

          if (!response.ok) {
            throw new Error(&#39;Failed to save text.&#39;);
          }

          const data = await response.json();
          currentSecurityCode = `${currentKey}${data.id}`; // Create security code dynamically
          securityCodeSpan.textContent = currentSecurityCode;
          messageDiv.textContent = &#39;Text saved successfully!&#39;;

          // Store the saved security code in session storage
          sessionStorage.setItem(&#39;shareMeCode&#39;, currentSecurityCode);
        } catch (error) {
          messageDiv.textContent = `Error: ${error.message}`;
        }
      } else {
        messageDiv.textContent = &#39;Please enter valid text.&#39;;
      }
    });

    // Access text using the API and security code
    document.getElementById(&#39;access-button&#39;).addEventListener(&#39;click&#39;, async () =&gt; {
      const code = document.getElementById(&#39;access-code&#39;).value;

      // Extract the key and ID from the entered code
      const enteredKey = code.slice(0, 2); // The first 2 characters are the key
      const id = code.slice(2); // The rest is the ID

      // Validate the entered code format
      if (!id || isNaN(id)) {
        messageDiv.textContent = &#39;Invalid security code format.&#39;;
        return;
      }

      try {
        // Fetch the data by ID
        const response = await fetch(`https://6788c5262c874e66b7d63895.mockapi.io/text/data/${id}`);

        if (!response.ok) {
          throw new Error(&#39;Failed to retrieve text.&#39;);
        }

        const data = await response.json();

        // Compare the key from the API response with the entered key
        if (data.key === enteredKey) {
          accessTextArea.value = data.message; // Display the message in the text area
          messageDiv.textContent = &#39;Text retrieved successfully!&#39;;
        } else {
          messageDiv.textContent = &#39;Security code does not match.&#39;;
        }
      } catch (error) {
        messageDiv.textContent = `Error: ${error.message}`;
      }
    });

    // Update text using the API
    document.getElementById(&#39;update-button&#39;).addEventListener(&#39;click&#39;, async () =&gt; {
      const code = prompt(`Please enter the security code (${currentKey}{id}):`);
      
      // Validate the format of the security code
      if (!code || !code.startsWith(currentKey)) {
        messageDiv.textContent = &#39;Invalid security code format.&#39;;
        return;
      }

      const id = code.slice(currentKey.length); // Extract the ID from the security code
      if (isNaN(id) || id === &#39;&#39;) {
        messageDiv.textContent = &#39;Invalid security code format.&#39;;
        return;
      }

      const updatedText = document.getElementById(&#39;text-input&#39;).value;
      if (!updatedText) {
        messageDiv.textContent = &#39;Please enter the text you want to update.&#39;;
        return;
      }

      try {
        const response = await fetch(`https://6788c5262c874e66b7d63895.mockapi.io/text/data/${id}`, {
          method: &#39;PUT&#39;,
          headers: {
            &#39;Content-Type&#39;: &#39;application/json&#39;,
          },
          body: JSON.stringify({
            message: updatedText, // Updated message
            key: currentKey, // Updated key
          }),
        });

        if (!response.ok) {
          throw new Error(&#39;Failed to update text.&#39;);
        }

        messageDiv.textContent = &#39;Text updated successfully!&#39;;
      } catch (error) {
        messageDiv.textContent = `Error: ${error.message}`;
      }
    });
  </script>
	</body>
</html>